# Proof of Putt Launch Commands
**Date:** August 28, 2025  
**Generated by:** Claude Code  
**Phase:** Repository Restructuring & Deployment  

---

## Phase 1: Repository Restructuring Commands

### Step 1: Create New GitHub Repositories
Create these three new private repositories on GitHub:
- `proofofputt-backend`
- `proofofputt-frontend` 
- `proofofputt-desktop`

### Step 2: Push Code to New Repositories

#### Backend Repository Setup:
```bash
# Navigate to backend directory
cd /Users/nw/proofofputt/backend

# Initialize git if not already done
git init
git branch -M main

# Add all backend files
git add .
git commit -m "Initial backend commit for launch

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"

# Add remote and push (replace with your actual repository URL)
git remote add origin https://github.com/proofofputt/proofofputt-backend.git
git push -u origin main
```

#### Frontend Repository Setup:
```bash
# Navigate to frontend webapp directory
cd /Users/nw/proofofputt/frontend/webapp

# Initialize git
git init
git branch -M main

# Add all frontend files
git add .
git commit -m "Initial frontend commit for launch

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"

# Add remote and push (replace with your actual repository URL)
git remote add origin https://github.com/proofofputt/proofofputt-frontend.git
git push -u origin main
```

#### Desktop Repository Setup:
```bash
# Navigate to desktop directory
cd /Users/nw/proofofputt/desktop

# Initialize git
git init
git branch -M main

# Add all desktop files
git add .
git commit -m "Initial desktop application commit for launch

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"

# Add remote and push (replace with your actual repository URL)
git remote add origin https://github.com/proofofputt/proofofputt-desktop.git
git push -u origin main
```

---

## Phase 2: Backend Deployment (Vercel)

### Step 1: Create Vercel Project for Backend
1. Go to Vercel dashboard
2. Create new project
3. Connect to `proofofputt-backend` repository
4. Framework Preset: Other
5. Root Directory: `./`
6. Deploy

### Step 2: Configure Environment Variables in Vercel
Add these environment variables in Vercel project settings:
- `DATABASE_URL`: Your NeonDB connection string
- `SENDGRID_API_KEY`: Your SendGrid API key  
- `SENDGRID_FROM_EMAIL`: Your verified sender email
- `GEMINI_API_KEY`: Your Google Gemini API key
- `ALLOWED_ORIGINS`: `https://www.proofofputt.com,http://localhost:5173`
- `FRONTEND_URL`: `https://www.proofofputt.com` (will update after frontend deploy)

---

## Phase 3: Frontend Deployment (Vercel)

### Step 1: Create Vercel Project for Frontend
1. Go to Vercel dashboard
2. Create new project  
3. Connect to `proofofputt-frontend` repository
4. Framework Preset: Vite
5. Root Directory: `./`
6. Deploy

### Step 2: Configure Environment Variables
Add this environment variable in Vercel project settings:
- `VITE_API_URL`: Backend URL from Phase 2 (e.g., `https://proofofputt-backend.vercel.app`)

### Step 3: Update Backend FRONTEND_URL
Go back to backend Vercel project and update:
- `FRONTEND_URL`: Frontend URL from this deployment

---

## Phase 4: Desktop Application Build

### Step 1: Update Tauri Configuration
```bash
cd /Users/nw/proofofputt/desktop
```

Edit `src-tauri/tauri.conf.json` to update production API URL in the `scope` array:
- Change from `"http://127.0.0.1:5001/*"` to your production backend URL
- Update CSP to allow production backend

### Step 2: Build Desktop Application
```bash
# Install dependencies
npm install

# Build for all platforms (macOS .dmg, Windows .msi)
npm run tauri build
```

### Step 3: Create GitHub Release
1. Go to `proofofputt-desktop` repository on GitHub
2. Create new release
3. Upload generated installer files from `src-tauri/target/release/bundle/`
4. Tag version as `v0.1.0`
5. Add release notes describing the desktop application features

---

## Phase 5: Post-Deployment Steps

### Step 1: Test All Components
- [ ] Backend API health check
- [ ] Frontend loads and connects to backend
- [ ] Desktop app installs and connects to production backend

### Step 2: Update Website
Add download links on proofofputt.com pointing to GitHub release page

### Step 3: Background Services
Start scheduler service for league round management:
```bash
cd backend/
python scheduler.py &
```

---

## Security Verification âœ…
- [x] No hardcoded credentials in any repository
- [x] All sensitive data using environment variables
- [x] CORS properly configured
- [x] CSP policies in place for desktop app

**Ready to execute Phase 1?** Let me know when you've created the GitHub repositories and I'll help execute the git commands!