Comprehensive API Endpoint Checklist

  Let me analyze what endpoints we have vs what we need by checking the api.js file:

⏺ Read(apps/web/src/api.js)
  ⎿  Read 30 lines (ctrl+r to expand)

⏺ Let me get all the API functions to create the complete list:

⏺ Bash(cd apps/web/src && grep -n "export const api" api.js)
  ⎿  24:export const apiLogin = (email, password) => {         
     32:export const apiRegister = (email, password, name) => {
     40:export const apiForgotPassword = (email) => {
     … +55 lines (ctrl+r to expand)

⏺ Now let me check what we currently have implemented:

⏺ Bash(find api -name "*.js" | sort)
  ⎿  find: api: No such file or directory

⏺ Bash(cd /Users/nw/proofofputt-repos/proofofputt && find api -name "*.js" | sort)
  ⎿  api/leaderboards.js                  
     api/login.js
     api/player/[playerId]/career-stats.js
     … +6 lines (ctrl+r to expand)

⏺ COMPREHENSIVE API ENDPOINT CHECKLIST

  ✅ IMPLEMENTED (9/35)

  1. POST /api/login ✅
  2. POST /api/register ✅
  3. GET /api/player/[id]/data ✅
  4. GET /api/player/[id]/career-stats ✅
  5. POST /api/player/[id]/redeem-coupon ✅
  6. GET /api/sessions ✅
  7. POST /api/start-session ✅
  8. POST /api/start-calibration ✅
  9. GET /api/leaderboards ✅

  ❌ MISSING CRITICAL ENDPOINTS (8/35) - *Updated based on `proofofputt-backend-production/api.py`*

  Auth & User (0 missing)

  10. POST /api/forgot-password ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/forgot-password`.
  11. POST /api/reset-password ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/reset-password`.

  Player Data & Settings (2 missing)

  12. GET /api/players/search ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/players/search`.
  13. PUT /api/player/[id] ✅ (Update player)
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/player/<int:player_id>`.
  14. PUT /api/player/[id]/socials ❌
  15. PUT /api/player/[id]/notification-preferences ❌

  Sessions (0 missing)

  16. GET /api/player/[id]/sessions ✅ (Paginated sessions)
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/player/<int:player_id>/sessions`.

  Duels (0 missing)

  17. GET /api/duels/list/[playerId] ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/duels/list/<int:player_id>`.
  18. POST /api/duels ✅ (Create duel)
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/duels`.
  19. POST /api/duels/[id]/respond ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/duels/<int:duel_id>/respond`.
  20. POST /api/duels/[id]/submit ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/duels/<int:duel_id>/submit`.
  21. GET /api/players/[id1]/vs/[id2]/duels ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/players/<int:player1_id>/vs/<int:player2_id>/duels`.
  22. GET /api/players/[id1]/vs/[id2]/leaderboard ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/players/<int:player1_id>/vs/<int:player2_id>/leaderboard`.

  Leagues (3 missing)

  23. GET /api/leagues ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/leagues`.
  24. GET /api/leagues/[id] ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/leagues/<int:league_id>`.
  25. GET /api/leagues/[id]/leaderboard ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/leagues/<int:league_id>/leaderboard`.
  26. POST /api/leagues ✅ (Create league)
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/leagues`.
  27. POST /api/leagues/[id]/join ❌
  28. POST /api/leagues/[id]/invite ❌
  29. POST /api/leagues/invites/[id]/respond ❌
  30. PUT /api/leagues/[id]/settings ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/leagues/<int:league_id>/settings`.
  31. DELETE /api/leagues/[id] ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/leagues/<int:league_id>`.

  Other Features (2 missing)

  32. GET /api/notifications/[playerId] ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/notifications/<int:player_id>`.
  33. POST /api/coach/chat ❌
    *   Note: A general `/coach/chat` endpoint is missing. There is `/coach/conversation/<int:conversation_id>/message` for sending messages within an existing conversation.
  34. GET /api/fundraisers ✅
    *   Note: Implemented in `proofofputt-backend-production/api.py` as `/fundraisers`.
  35. POST /api/player/[id]/subscription/cancel ❌

  Let me start implementing the most critical missing endpoints needed for the dashboard:

⏺ PRIORITY ORDER for restoring dashboard:
  1. Player sessions (for session history table)
  2. Leagues (for premium access)
  3. Duels (for competition features)
  4. Notifications (for activity feed)

  Should I start implementing these missing endpoints systematically, starting with player sessions?


;--------------------------------------------------------------------------------
; ARCHITECTURE ADDENDUM: Desktop-to-Web Interaction Model
;--------------------------------------------------------------------------------

[Desktop-Web-Integration-v2]
; This section outlines the architecture for initiating desktop sessions from the web application.
; This approach replaces the previous plan of embedding the entire web app in the desktop client.

strategy="Custom URL Scheme (Deep Linking)"
scheme="proofofputt://"
description="A minimal, purpose-built desktop UI listens for commands from the main web app via a custom URL. This decouples the desktop utility from the web frontend, increasing stability and simplifying maintenance."

[Deep-Link-Flow]
step_1="User clicks 'Start Session' (for a Duel, League, etc.) on app.proofofputt.com."
step_2="The web app triggers a browser navigation to a custom URL, e.g., 'proofofputt://start-session?type=duel&id=123'."
step_3="The user's OS launches the Proof of Putt desktop application, passing the full URL as an argument."
step_4="The desktop app's Rust backend captures and parses the URL to extract the session context (type and ID)."
step_5="The Rust backend invokes the Python CV tracker, passing the session context as command-line arguments."
step_6="The Python tracker runs the session and, upon completion, submits the putt data along with the session context to the backend API endpoint (/api/sessions/submit)."

[Required-Component-Changes]
; Summary of modifications needed across the codebase to implement this architecture.

desktop_ui="A new, minimal React app with a simple status display. Its primary job is to listen for deep link events and display the session status. It will no longer embed the full web app."
tauri_backend="Update tauri.conf.json to register the 'proofofputt://' scheme. Add Rust logic to handle the deep link activation event and parse the URL."
python_tracker="Modify run_tracker.py to accept session context arguments and include them in the final data payload sent to the API."
backend_api="Enhance the /api/sessions/submit endpoint to understand the session context (e.g., 'duel_id') and associate the session data with the correct entity in the database."
web_app="Change all 'Start Session' buttons to trigger a navigation to the custom deep link URL instead of making a direct API call."